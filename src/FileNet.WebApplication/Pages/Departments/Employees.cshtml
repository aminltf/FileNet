@page "{id:guid}"
@model FileNet.WebApplication.Pages.Departments.EmployeesModel
@using FileNet.WebFramework.Contracts.Common
@{
    ViewData["Title"] = "Department Employees";
}

<div class="container mt-4" id="dept-emps">
    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
        <h2 class="mb-0">
            Employees — <span class="text-secondary">@Model.Department?.Name</span>
        </h2>
        <a class="btn btn-outline-secondary" asp-page="Index">Back to Departments</a>
    </div>

    @if (!string.IsNullOrWhiteSpace(Model.Success))
    {
        <div class="alert alert-success">@Model.Success</div>
    }
    @if (!string.IsNullOrWhiteSpace(Model.Error))
    {
        <div class="alert alert-danger">@Model.Error</div>
    }

    <div class="d-flex align-items-center justify-content-between gap-3 flex-wrap mb-3">
        <div class="input-group" style="max-width:580px;">
            <input id="search" class="form-control" placeholder="Search..." value="@Model.SearchTerm" />
            <button id="btnSearch" class="btn btn-outline-primary" type="button">Search</button>
        </div>
        <div class="d-flex align-items-center gap-2 ms-auto">
            <label for="pageSize" class="col-form-label">Page size</label>
            <select id="pageSize" class="form-select form-select-sm" style="width:auto;">
                @{
                    var sizes = new[] { 10, 20, 50, 100 };
                    foreach (var s in sizes)
                    {
                        <option value="@s" selected="@(Model.PageSize == s)">@s</option>
                    }
                }
            </select>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle text-center">
            <thead>
                <tr>
                    <th style="width:1%">#</th>
                    <th>
                        <a href="#" class="sort" data-col="NationalCode">
                            National Code <span class="si" data-for="NationalCode"></span>
                        </a>
                    </th>
                    <th>
                        <a href="#" class="sort" data-col="FirstName">
                            First Name <span class="si" data-for="FirstName"></span>
                        </a>
                    </th>
                    <th>
                        <a href="#" class="sort" data-col="LastName">
                            Last Name <span class="si" data-for="LastName"></span>
                        </a>
                    </th>
                    <th>
                        <a href="#" class="sort" data-col="DocumentCount">
                            Docs <span class="si" data-for="DocumentCount"></span>
                        </a>
                    </th>
                    <th style="width:1%">Operations</th>
                </tr>
            </thead>
            <tbody id="rows">
                @{
                    var items = Model.Items;
                    var start = (Model.PageNumber <= 1 ? 1 : ((Model.PageNumber - 1) * Model.PageSize) + 1);
                    var i = start;
                    foreach (var e in items)
                    {
                        <tr>
                            <td class="text-muted">@i</td>
                            <td>@e.NationalCode</td>
                            <td>@e.FirstName</td>
                            <td>@e.LastName</td>
                            <td class="text-center">@e.DocumentCount</td>
                            <td class="text-nowrap">
                                <a class="btn btn-sm btn-outline-secondary btn-icon"
                                   asp-page="/Employees/Details" asp-route-id="@e.Id"
                                   aria-label="Details" data-bs-toggle="tooltip" title="Details">
                                    <i class="bi bi-eye"></i>
                                </a>
                                <a class="btn btn-sm btn-outline-primary btn-icon"
                                   asp-page="/Employees/Edit" asp-route-id="@e.Id"
                                   aria-label="Edit" data-bs-toggle="tooltip" title="Edit">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <a class="btn btn-sm btn-outline-dark btn-icon"
                                   asp-page="/Employees/Documents" asp-route-id="@e.Id"
                                   aria-label="Documents" data-bs-toggle="tooltip" title="Documents">
                                    <i class="bi bi-folder2-open"></i>
                                </a>
                            </td>
                        </tr>
                        i++;
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <div id="summary">
            @if (Model.Page is not null)
            {
                var from = (Model.Page.PageNumber - 1) * Model.Page.PageSize + 1;
                var to = Math.Min(Model.Page.PageNumber * Model.Page.PageSize, Model.Page.TotalCount);
                <span>Showing @(Model.Page.TotalCount == 0 ? 0 : from)–@(Model.Page.TotalCount == 0 ? 0 : to) of @Model.Page.TotalCount</span>
            }
        </div>
        <nav aria-label="Employees pagination">
            <ul id="pager" class="pagination mb-0">
                @{
                    var hasPrev = Model.PageNumber > 1;
                    var hasNext = Model.Page is not null && (Model.Page.PageNumber * Model.Page.PageSize < Model.Page.TotalCount);
                }
                <li class="page-item @(hasPrev ? "" : "disabled")"><a class="page-link" href="#" data-nav="prev">Prev</a></li>
                <li class="page-item @(hasNext ? "" : "disabled")"><a class="page-link" href="#" data-nav="next">Next</a></li>
            </ul>
        </nav>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
          const state = {
            pageNumber: @Model.PageNumber,
            pageSize: @Model.PageSize,
            searchTerm: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SearchTerm ?? "")),
            sortColumn: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SortColumn ?? "")),
            sortDirection: '@Model.SortDirection' // "Asc" | "Desc"
          };

          const rows    = document.getElementById('rows');
          const search  = document.getElementById('search');
          const btnSearch = document.getElementById('btnSearch');
          const pageSize= document.getElementById('pageSize');
          const pager   = document.getElementById('pager');
          const summary = document.getElementById('summary');

          const baseUrl = window.location.pathname; // /Departments/Employees/{id}

          const qstr = () => {
            const p = new URLSearchParams();
            p.set('PageNumber', state.pageNumber);
            p.set('PageSize', state.pageSize);
            if (state.searchTerm) p.set('SearchTerm', state.searchTerm);
            if (state.sortColumn) { p.set('SortColumn', state.sortColumn); p.set('SortDirection', state.sortDirection); }
            return p.toString();
          };

          const setSortIndicators = () => {
            document.querySelectorAll('.si').forEach(x => x.textContent = '');
            if (!state.sortColumn) return;
            const el = document.querySelector(`.si[data-for="${state.sortColumn}"]`);
            if (el) el.textContent = state.sortDirection === 'Asc' ? ' ▲' : ' ▼';
          };

          function initTooltips(){
            document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el=>{
              const t = bootstrap.Tooltip.getInstance(el); if(t) t.dispose();
              new bootstrap.Tooltip(el);
            });
          }

          async function loadPartial() {
            rows.innerHTML = `<tr><td colspan="6" class="text-center py-4">
              <div class="spinner-border" role="status" aria-hidden="true"></div>
              <span class="ms-2">Loading...</span>
            </td></tr>`;

            const url = `${baseUrl}?${qstr()}`;
            try {
              const res = await fetch(url, { headers: { 'Accept': 'text/html' } });
              if (!res.ok) throw new Error('Load failed');
              const html = await res.text();
              const doc = new DOMParser().parseFromString(html, 'text/html');

              rows.innerHTML    = doc.querySelector('#rows')?.innerHTML    ?? '';
              summary.innerHTML = doc.querySelector('#summary')?.innerHTML ?? '';
              pager.innerHTML   = doc.querySelector('#pager')?.innerHTML   ?? '';

              setSortIndicators();
              window.history.replaceState({}, '', url);
              initTooltips();
            } catch (e) {
              console.error(e);
              rows.innerHTML = `<tr><td colspan="6" class="text-danger text-center">Error loading data.</td></tr>`;
            }
          }

          btnSearch.addEventListener('click', () => {
            state.searchTerm = search.value.trim();
            state.pageNumber = 1;
            loadPartial();
          });
          search.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') { e.preventDefault(); btnSearch.click(); }
          });

          pageSize.addEventListener('change', () => {
            state.pageSize = parseInt(pageSize.value, 10) || 10;
            state.pageNumber = 1;
            loadPartial();
          });

          document.querySelectorAll('a.sort').forEach(a => {
            a.addEventListener('click', ev => {
              ev.preventDefault();
              const col = a.dataset.col;
              if (state.sortColumn === col) {
                state.sortDirection = state.sortDirection === 'Asc' ? 'Desc' : 'Asc';
              } else {
                state.sortColumn = col;
                state.sortDirection = 'Asc';
              }
              state.pageNumber = 1;
              loadPartial();
            });
          });

          pager.addEventListener('click', ev => {
            const link = ev.target.closest('a.page-link'); if (!link) return;
            ev.preventDefault();
            if (link.dataset.nav === 'prev' && state.pageNumber > 1) state.pageNumber--;
            if (link.dataset.nav === 'next') state.pageNumber++;
            loadPartial();
          });

          setSortIndicators();
          initTooltips();
        })();
    </script>
}
