@page
@model FileNet.WebApplication.Pages.Departments.IndexModel
@using FileNet.WebFramework.Contracts.Common
@{
	ViewData["Title"] = "Departments";
}

<div class="container mt-4" id="depts">
	<div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
		<h2 class="mb-0">دپارتمان‌ها</h2>
		<authorize roles="Admin,Manager">
			<a class="btn btn-primary" asp-page="Create">+ ایجاد دپارتمان</a>
		</authorize>
	</div>

	@if (!string.IsNullOrWhiteSpace(Model.Success))
	{
		<div class="alert alert-success" role="alert">@Model.Success</div>
	}
	@if (!string.IsNullOrWhiteSpace(Model.Error))
	{
		<div class="alert alert-danger" role="alert">@Model.Error</div>
	}

	<div class="d-flex align-items-center justify-content-between gap-3 flex-wrap mb-3">
		<div class="input-group" style="max-width:580px;">
			<input id="search" class="form-control" placeholder="جستجو..." value="@Model.SearchTerm" />
			<button id="btnSearch" class="btn btn-outline-primary" type="button">جستجو</button>
		</div>

		<div class="d-flex align-items-center gap-2 ms-auto">
			<label for="pageSize" class="col-form-label">اندازه صفحه</label>
			<select id="pageSize" class="form-select form-select-sm" style="width:auto;">
				@{
					var sizes = new[] { 10, 20, 50, 100 };
					foreach (var s in sizes)
					{
						<option value="@s" selected="@(Model.PageSize == s)">@s</option>
					}
				}
			</select>
		</div>
	</div>

	<div class="table-responsive">
		<table class="table table-striped table-hover align-middle text-center">
			<thead>
				<tr>
					<th style="width:1%">#</th>
					<th><a href="#" class="sort" data-col="Code">کد<span class="si" data-for="Code"></span></a></th>
					<th><a href="#" class="sort" data-col="Name">نام<span class="si" data-for="Name"></span></a></th>
					<th><a href="#" class="sort" data-col="Description">توضیحات<span class="si" data-for="Description"></span></a></th>
					<th><a href="#" class="sort" data-col="EmployeeCount">تعداد کارمندان<span class="si" data-for="EmployeeCount"></span></a></th>
					<th style="width:1%">عملیات</th>
				</tr>
			</thead>
			<tbody id="rows">
				@{
					var start = (Model.PageNumber <= 1 ? 1 : ((Model.PageNumber - 1) * Model.PageSize) + 1);
					var i = start;
					foreach (var d in Model.Items)
					{
						<tr>
							<td class="text-muted">@i</td>
							<td>@d.Code</td>
							<td>@d.Name</td>
							<td>@d.Description</td>
							<td class="text-center">@d.EmployeeCount</td>
							<td class="text-nowrap">
								<!-- Details -->
								<a class="btn btn-sm btn-outline-secondary btn-icon"
								   asp-page="Details" asp-route-id="@d.Id"
								   aria-label="Details" data-bs-toggle="tooltip" title="جزئیات">
									<i class="bi bi-eye"></i>
								</a>

								<!-- Edit -->
								<authorize roles="Admin,Manager">
									<a class="btn btn-sm btn-outline-primary btn-icon"
									   asp-page="Edit" asp-route-id="@d.Id"
									   aria-label="Edit" data-bs-toggle="tooltip" title="ویرایش">
										<i class="bi bi-pencil-square"></i>
									</a>
								</authorize>

								<!-- Employees -->
								<a class="btn btn-sm btn-outline-dark btn-icon"
								   asp-page="Employees" asp-route-id="@d.Id"
								   aria-label="Employees" data-bs-toggle="tooltip" title="کارمندان">
									<i class="bi bi-people"></i>
								</a>

								<!-- Delete -->
								
							</td>
						</tr>
						i++;
					}
				}
			</tbody>
		</table>
	</div>

	<div class="small text-muted mt-2">
		Roles:
		@string.Join(',', User?.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).Select(c => c.Value) ?? Array.Empty<string>())
	</div>

	<div class="d-flex justify-content-between align-items-center">
		<div id="summary">
			@if (Model.Page is not null)
			{
				var from = (Model.Page.PageNumber - 1) * Model.Page.PageSize + 1;
				var to = Math.Min(Model.Page.PageNumber * Model.Page.PageSize, Model.Page.TotalCount);
				<span>نمایش @(Model.Page.TotalCount == 0 ? 0 : from)–@(Model.Page.TotalCount == 0 ? 0 : to) از @Model.Page.TotalCount</span>
			}
		</div>
		<nav aria-label="Departments pagination">
			<ul id="pager" class="pagination mb-0">
				@{
					var hasPrev = Model.PageNumber > 1;
					var hasNext = Model.Page is not null && (Model.Page.PageNumber * Model.Page.PageSize < Model.Page.TotalCount);
				}
				<li class="page-item @(hasPrev ? "" : "disabled")"><a class="page-link" href="#" data-nav="prev">قبلی</a></li>
				<li class="page-item @(hasNext ? "" : "disabled")"><a class="page-link" href="#" data-nav="next">بعدی</a></li>
			</ul>
		</nav>
	</div>
</div>

@section Scripts {
	<script>
		(() => {
		  const state = {
			pageNumber: @Model.PageNumber,
			pageSize: @Model.PageSize,
			searchTerm: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SearchTerm ?? "")),
			sortColumn: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SortColumn ?? "")),
			sortDirection: '@Model.SortDirection' // "Asc" | "Desc"
		  };

		  const rows = document.getElementById('rows');
		  const search = document.getElementById('search');
		  const btnSearch = document.getElementById('btnSearch');
		  const pageSize = document.getElementById('pageSize');
		  const pager = document.getElementById('pager');
		  const summary = document.getElementById('summary');

		  const baseUrl = window.location.pathname;

		  const esc = s => String(s ?? '').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
		  const qstr = () => {
			const p = new URLSearchParams();
			p.set('PageNumber', state.pageNumber);
			p.set('PageSize', state.pageSize);
			if (state.searchTerm) p.set('SearchTerm', state.searchTerm);
			if (state.sortColumn) { p.set('SortColumn', state.sortColumn); p.set('SortDirection', state.sortDirection); }
			return p.toString();
		  };
		  const setSortIndicators = () => {
			document.querySelectorAll('.si').forEach(x => x.textContent = '');
			if (!state.sortColumn) return;
			const el = document.querySelector(`.si[data-for="${state.sortColumn}"]`);
			if (el) el.textContent = state.sortDirection === 'Asc' ? ' ▲' : ' ▼';
		  };

		  async function loadPartial() {
			rows.innerHTML = `<tr><td colspan="6" class="text-center py-4">
			  <div class="spinner-border" role="status" aria-hidden="true"></div>
			  <span class="ms-2">Loading...</span>
			</td></tr>`;

			const url = `${baseUrl}?${qstr()}`;
			try {
			  const res = await fetch(url, { headers: { 'Accept': 'text/html' } });
			  if (!res.ok) throw new Error('Load failed');
			  const html = await res.text();
			  const doc = new DOMParser().parseFromString(html, 'text/html');

			  const newRows = doc.querySelector('#rows');
			  const newSummary = doc.querySelector('#summary');
			  const newPager = doc.querySelector('#pager');

			  if (newRows) rows.innerHTML = newRows.innerHTML;
			  if (newSummary) summary.innerHTML = newSummary.innerHTML;
			  if (newPager) pager.innerHTML = newPager.innerHTML;

			  setSortIndicators();
			  window.history.replaceState({}, '', url);
			  bindAjaxDelete();
			} catch (e) {
			  console.error(e);
			  rows.innerHTML = `<tr><td colspan="6" class="text-danger text-center">Error loading data.</td></tr>`;
			}
		  }

		  function bindAjaxDelete() {
			document.querySelectorAll('form.ajax-delete').forEach(f => {
			  f.addEventListener('submit', async ev => {
				ev.preventDefault();
				const form = ev.currentTarget;
				const fd = new FormData(form);
				try {
				  const res = await fetch(form.action || (baseUrl + '?handler=Delete'), { method: 'POST', body: fd });
				  if (!res.ok) throw new Error('Delete failed');
				  await loadPartial();
				} catch (e) {
				  console.error(e);
				  alert('Error deleting the department.');
				}
			  }, { once: false });
			});
		  }

		  btnSearch.addEventListener('click', () => {
			state.searchTerm = search.value.trim();
			state.pageNumber = 1;
			loadPartial();
		  });
		  search.addEventListener('keydown', e => {
			if (e.key === 'Enter') { e.preventDefault(); btnSearch.click(); }
		  });

		  pageSize.addEventListener('change', () => {
			state.pageSize = parseInt(pageSize.value, 10) || 10;
			state.pageNumber = 1;
			loadPartial();
		  });

		  document.querySelectorAll('a.sort').forEach(a => {
			a.addEventListener('click', ev => {
			  ev.preventDefault();
			  const col = a.dataset.col;
			  if (state.sortColumn === col) {
				state.sortDirection = state.sortDirection === 'Asc' ? 'Desc' : 'Asc';
			  } else {
				state.sortColumn = col;
				state.sortDirection = 'Asc';
			  }
			  state.pageNumber = 1;
			  loadPartial();
			});
		  });

		  pager.addEventListener('click', ev => {
			const link = ev.target.closest('a.page-link');
			if (!link) return;
			ev.preventDefault();
			const nav = link.dataset.nav;
			if (nav === 'prev' && state.pageNumber > 1) state.pageNumber--;
			if (nav === 'next') state.pageNumber++;
			loadPartial();
		  });

		  bindAjaxDelete();
		})();
	</script>

	<script>
		function initTooltips(){
		  document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el=>{
			const t = bootstrap.Tooltip.getInstance(el); if(t) t.dispose();
			new bootstrap.Tooltip(el);
		  });
		}
		initTooltips();

		initTooltips();
	</script>
}
